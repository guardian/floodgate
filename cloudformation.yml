
AWSTemplateFormatVersion: 2010-09-09
Description: 'Content API - Floodgate'
Parameters:
    Stack:
        Description: Stack name
        Type: String
        AllowedValues:
            - content-api-floodgate
            - content-api-floodgate-preview
        Default: content-api-floodgate
    Stage:
        Description: 'Environment name'
        Type: String
        Default: CODE
    Region:
        Description: 'AWS region'
        Type: String
        Default: eu-west-1
    VPC:
        Description: 'Virtual Private Cloud to run EC2 instances within'
        Type: AWS::EC2::VPC::Id
    Subnets:
        Description: 'Subnets to run load balancer within'
        Type: List<AWS::EC2::Subnet::Id>
    AMI:
        Description: 'AMI ID'
        Type: String
    SSLCertificate:
        Description: 'The ARN of the SSL certificate to use for the ELB'
        Type: String
Resources:
    RootRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: Allow
                      Principal: { Service: [ 'ec2.amazonaws.com' ] }
                      Action: [ 'sts:AssumeRole' ]
            ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

    DownloadConfigAndAppFromS3Policy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: download-config-and-app-from-s3
            Roles:
                - !Ref RootRole
            PolicyDocument:
                Statement:
                    - Effect: Allow
                      Action: [ 's3:GetObject' ]
                      Resource:
                        - arn:aws:s3:::content-api-config/*
                        - arn:aws:s3:::content-api-dist/*

    DynamoDBPolicy:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: DynamoDBPolicy
            Roles:
                - !Ref RootRole
            PolicyDocument:
                Statement:
                    - Effect: Allow
                      Action: [ 'dynamodb:*' ]
                      Resource:
                            - !Sub arn:aws:dynamodb:*:${AWS::AccountId}:table/floodgate-*-${Stage}

    InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref RootRole

    LoadBalancer:
        Type: AWS::ElasticLoadBalancing::LoadBalancer
        Properties:
            Scheme: internet-facing
            SecurityGroups:
                - !Ref LoadBalancerSecurityGroup
            Subnets: !Ref Subnets
            CrossZone: true
            Listeners:
              - Protocol: HTTPS
                LoadBalancerPort: 443
                InstancePort: 9000
                SSLCertificateId: !Ref SSLCertificate
            HealthCheck:
                Target: 'HTTP:9000/healthcheck'
                Timeout: 5
                Interval: 10
                UnhealthyThreshold: 2
                HealthyThreshold: 2
            Tags:
                - { Key: Stack, Value: !Ref Stack }
                - { Key: Stage, Value: !Ref Stage }
                - { Key: App, Value: content-api-floodgate }

    AutoscalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier: !Ref Subnets
            AvailabilityZones: {'Fn::GetAZs': ''}
            LaunchConfigurationName: !Ref LaunchConfig
            MinSize: 1
            MaxSize: 2
            DesiredCapacity: 1
            HealthCheckType: ELB
            HealthCheckGracePeriod: 300
            LoadBalancerNames:
                - !Ref LoadBalancer
            Tags:
                - { Key: Stack, Value: !Ref Stack, PropagateAtLaunch: true }
                - { Key: Stage, Value: !Ref Stage, PropagateAtLaunch: true }
                - { Key: App, Value: content-api-floodgate, PropagateAtLaunch: true }

    LaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId: !Ref AMI
            AssociatePublicIpAddress: true
            SecurityGroups:
                - !Ref ApplicationSecurityGroup
            InstanceType: t2.nano
            IamInstanceProfile: !Ref InstanceProfile
            UserData:
                Fn::Base64:
                    !Sub |
                        #!/bin/bash -ev

                        adduser --disabled-password content-api

                        aws configure set region ${Region}

                        cd /home/content-api

                        mkdir -p /etc/gu
                        mkdir logs

                        echo 'STAGE=${Stage}' > /etc/gu/install_vars
                        aws s3 cp s3://content-api-dist/${Stack}/${Stage}/content-api-floodgate/content-api-floodgate.service /etc/systemd/system/floodgate.service
                        aws s3 cp s3://content-api-config/content-api-floodgate/${Stage}/floodgate.conf /etc/gu/floodgate.conf
                        aws s3 cp s3://content-api-dist/${Stack}/${Stage}/content-api-floodgate/content-api-floodgate-0.1-SNAPSHOT.tgz .

                        tar xfv content-api-floodgate-0.1-SNAPSHOT.tgz
                        mv content-api-floodgate-0.1-SNAPSHOT floodgate

                        chown -R content-api /home/content-api /etc/gu
                        chgrp -R content-api /home/content-api /etc/gu

                        systemctl start floodgate

    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: 'Restricted access (given Guardian IP Range) to the load balancer on port 80'
            VpcId: !Ref VPC
            SecurityGroupIngress:
                - { IpProtocol: tcp, FromPort: 443, ToPort: 443, CidrIp: 77.91.248.0/21 }
            SecurityGroupEgress:
                - { IpProtocol: tcp, FromPort: 9000, ToPort: 9000, CidrIp: 0.0.0.0/0 }

    ApplicationSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: 'SSH and HTTP'
            VpcId: !Ref VPC
            SecurityGroupIngress:
                - { IpProtocol: tcp, FromPort: 9000, ToPort: 9000, SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup }
                - { IpProtocol: tcp, FromPort: 9000, ToPort: 9000, CidrIp: 77.91.248.0/21 }
                - { IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: 77.91.248.0/21 }

Outputs:
    LoadBalancer:
        Value: !GetAtt LoadBalancer.DNSName
