name: Build and upload

# Produce a build when...
on:
  # ...we raise (or commit to) a pull request
  pull_request:

  # ...or we push to main, e.g. merge a pull request
  push:
    branches:
      - main

  # ...or we manually invoke the build
  workflow_dispatch:

jobs:
  floodgate:
    runs-on: ubuntu-latest

    # The first two permissions are needed to interact with GitHub's OIDC Token endpoint.
    # The second set of three permissions are needed to write test results back to GH
    permissions:
      id-token: write
      contents: read
      issues: read
      checks: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "yarn"
          cache-dependency-path: cdk/yarn.lock

      - run: yarn install --frozen-lockfile
        name: Prepare for CDK infrastructure build
        working-directory: cdk
      - run: yarn test
        name: Test CDK infrastructure integrity
        working-directory: cdk
      - run: yarn synth
        name: Build infrastructure definition from CDK
        working-directory: cdk

      - run: yarn install --frozen-lockfile
        name: Prepare for frontend build
      - run: yarn build
        name: Build frontend

      - uses: guardian/setup-scala@v1

      - name: Build and test
        env:
          SBT_JUNIT_OUTPUT: ./junit-tests
        run: |
          sbt 'test;debian:packageBin'

      - uses: guardian/actions-riff-raff@v4
        with:
          # There's only one stage, PROD.
          # Ideally, we'd only deploy to PROD from main, so don't add the "deploy to <STAGE>" comment.
          commentingEnabled: false

          configPath: riff-raff.yaml
          projectName: Content Platforms::floodgate
          buildNumberOffset: 397
          roleArn: ${{ secrets.GU_RIFF_RAFF_ROLE_ARN }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          contentDirectories: |
            cloudformation:
              - cdk/cdk.out/Floodgate-PROD.template.json
            content-api-floodgate:
              - target/content-api-floodgate_1.0_all.deb

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always() #runs even if there is a test failure
        with:
          files: junit-tests/*.xml
